The following are the relevant source code files:

// /home/impulse/Projects/Lua/minetest_mods/inventory_admin/init.lua
local modpath = minetest.get_modpath("inventory_admin")
local srcpath = modpath .. "/src/"
inventory_admin = {}

dofile(srcpath .. "utils.lua")
dofile(srcpath .. "formspecs.lua")
dofile(srcpath .. "sync.lua")
dofile(srcpath .. "command.lua")

-- Register the invmanage priv
minetest.register_privilege("invmanage", {
    description = "Allows viewing and manageing of the inventory of other players",
    give_to_singleplayer = false,
})

-- Register the /inventory command
minetest.register_chatcommand("invmanage", {
    params = "<playername>",
    description = "View the inventory of another player",
    privs = {invmanage = true},
    func = inventory_admin.command_inventory,
})

-- On join player setup detached inventory
minetest.register_on_joinplayer(function(player)
    inventory_admin.setup_detached_inventory(player:get_player_name())
end)

-- Sync function that checks for changes in the player's inventory
-- and updates the detached inventory accordingly.
local function sync_inventories()
    for _, player in ipairs(minetest.get_connected_players()) do
        local player_name = player:get_player_name()
        minetest.log("action", "Syncing inventory of player: " .. player_name)
        inventory_admin.sync_player_to_detached_inventory(player_name)
    end
end

-- Register a globalstep to periodically check for inventory changes.
local timer = 0

-- Register a globalstep to periodically check for inventory changes.
minetest.register_globalstep(function(dtime)
    -- Interval in seconds to update the inventories, e.g., every 1 second.
    local interval = 1

    -- Accumulate elapsed time
    timer = timer + dtime
    if timer >= interval then
        -- Sync inventories
        sync_inventories()

        -- Reset the timer after syncing
        timer = 0
    end
end)

// /home/impulse/Projects/Lua/minetest_mods/inventory_admin/src/utils.lua
inventory_admin.utils = {} 

function inventory_admin.utils.is_mineclone2()
    return minetest.get_modpath("mcl_core") ~= nil
end

// /home/impulse/Projects/Lua/minetest_mods/inventory_admin/src/formspecs.lua
-- Get the formspec for the inventory based on the game
function inventory_admin.get_player_inventory_formspec(target_player_name, admin_name)
    if inventory_admin.utils.is_mineclone2() then
        -- MineClone2 formspec
        local formspec = {
            "formspec_version[4]",
            "size[11.75,13]",  -- Adjust the height to accommodate the spacing
    
            -- Title for the target player's inventory
            "label[0.375,0.375;", minetest.formspec_escape(target_player_name .. "'s Inventory"), "]",
    
            -- Slot backgrounds for the target player's main inventory excluding the hotbar
            mcl_formspec.get_itemslot_bg_v4(0.375, 1, 9, 3),
    
            -- Slot list for the target player's main inventory excluding the hotbar
            "list[detached:" .. target_player_name .. "_inventory;main;0.375,1;9,3;9]",
    
            -- Slot background for the target player's hotbar, placed at the bottom
            mcl_formspec.get_itemslot_bg_v4(0.375, 5, 9, 1),
    
            -- Slot list for the target player's hotbar
            "list[detached:" .. target_player_name .. "_inventory;main;0.375,5;9,1;0]",
    
            -- Title for the admin's inventory, moved further down to create space
            "label[0.375,6.5;Your Inventory]",
    
            -- Slot backgrounds for the admin player's main inventory excluding the hotbar
            mcl_formspec.get_itemslot_bg_v4(0.375, 7, 9, 3),
    
            -- Slot list for the admin player's main inventory excluding the hotbar
            "list[current_player;main;0.375,7;9,3;9]",
    
            -- Slot background for the admin player's hotbar, placed further down with spacing similar to the singleplayer's hotbar
            mcl_formspec.get_itemslot_bg_v4(0.375, 11, 9, 1),
    
            -- Slot list for the admin player's hotbar, with adjusted Y-coordinate for correct spacing
            "list[current_player;main;0.375,11;9,1;0]",
    
            -- Listrings to allow moving items between the target's and admin's inventories
            "listring[detached:" .. target_player_name .. "_inventory;main]",
            "listring[current_player;main]",
        }
    
        return table.concat(formspec)
    else
        -- minetest_game formspec
        local formspec = {
            "size[8,10]", -- Width and Height of the formspec
            "label[0.5,0.0;", minetest.formspec_escape(target_player_name .. "'s Inventory"), "]", -- Title label for the singleplayer's inventory
            
            -- Singleplayer's hotbar at the top, with index starting at 1
            "list[detached:" .. target_player_name .. "_inventory;main;0,0.5;8,1;0]",
            
            -- Empty row to visually separate the hotbar from the main inventory
            
            -- The singleplayer's main inventory
            "list[detached:" .. target_player_name .. "_inventory;main;0,2;8,3;9]", -- Starting index is 9 assuming the hotbar is 8 slots and the first row in the main inventory starts after the hotbar
            
            -- Title label for the admin's inventory
            "label[0.5,5;Your Inventory]", -- Adjust the Y position to 5
            
            -- The admin's main inventory
            "list[current_player;main;0,5.5;8,3;9]", -- Starting index is 9 to skip the admin's hotbar
            
            -- The admin's hotbar, visually separated
            "list[current_player;main;0,9;8,1;0]", -- Ensure all slots are included
            
            -- Listrings for item movement between the inventories
            "listring[detached:" .. target_player_name .. "_inventory;main]",
            "listring[current_player;main]",
        }
        
        return table.concat(formspec)
    end
end


// /home/impulse/Projects/Lua/minetest_mods/inventory_admin/src/sync.lua
function inventory_admin.setup_detached_inventory(target_player_name)
    -- Create a detached inventory if it does not exist
    if not inventory_admin.detached_inventories[target_player_name] then
        inventory_admin.detached_inventories[target_player_name] = minetest.create_detached_inventory(target_player_name .. "_inventory", {
            -- Define the callback functions for inventory actions
            on_put = function(inv, listname, index, stack, player)
                -- Sync the changes from the detached inventory to the player's inventory when items are put
                inventory_admin.sync_inventory_to_player(target_player_name, listname, index, stack)
            end,
            on_take = function(inv, listname, index, stack, player)
                -- Sync the changes from the detached inventory to the player's inventory when items are taken
                inventory_admin.sync_inventory_to_player(target_player_name, listname, index, nil)
            end,
            on_move = function(inv, from_list, from_index, to_list, to_index, count, player)
                -- Sync the entire inventory when items are moved within the detached inventory
                inventory_admin.sync_inventory_to_player(target_player_name)
            end,
        })
        
        -- Set the size of the inventory (e.g., main and hotbar are typically 9 slots each)
        inventory_admin.detached_inventories[target_player_name]:set_size("main", 36) -- Adjust size accordingly
        inventory_admin.detached_inventories[target_player_name]:set_size("hotbar", 9) -- Adjust size accordingly
    end

    -- Fill the detached inventory with the player's inventory items
    inventory_admin.sync_player_to_detached_inventory(target_player_name)
end

function inventory_admin.sync_player_to_detached_inventory(target_player_name)
    local player = minetest.get_player_by_name(target_player_name)
    if not player then
        minetest.log("error", "Player not found: " .. target_player_name)
        return
    end

    local player_inv = player:get_inventory()
    local detached_inv = inventory_admin.detached_inventories[target_player_name]

    -- Check if the detached inventory has been set up
    if not detached_inv then
        minetest.log("error", "Detached inventory not found for player: " .. target_player_name)
        return
    end

    -- Copy the player's inventory into the detached inventory, including the hotbar
    for i = 1, player_inv:get_size("main") do
        detached_inv:set_stack("main", i, player_inv:get_stack("main", i))
    end
end




function inventory_admin.sync_inventory_to_player(target_player_name, listname, index, stack)
    local player = minetest.get_player_by_name(target_player_name)
    if not player then
        minetest.log("error", "Player not found: " .. target_player_name)
        return
    end

    local player_inv = player:get_inventory()
    local detached_inv = inventory_admin.detached_inventories[target_player_name]

    -- If specific listname and index are provided, only sync that particular slot
    if listname and index then
        if stack then
            -- The stack is provided, so we update the slot with the new stack
            player_inv:set_stack(listname, index, stack)
        else
            -- If stack is nil, it means an item was taken out, so we set the slot to be empty
            player_inv:set_stack(listname, index, ItemStack(nil))
        end
    else
        -- Sync the entire inventory, which includes the hotbar since it's part of 'main'
        for i = 1, detached_inv:get_size("main") do
            player_inv:set_stack("main", i, detached_inv:get_stack("main", i))
        end
    end
end





// /home/impulse/Projects/Lua/minetest_mods/inventory_admin/src/command.lua
-- In your mod's global scope, register the detached inventories table
inventory_admin.detached_inventories = {}

-- command.lua
function inventory_admin.command_inventory(name, param)
    local player = minetest.get_player_by_name(name)
    if not player then
        return false, "You need to be online to use this command."
    end

    local target_player_name = param:trim()
    if target_player_name == "" then
        return false, "Please specify a player name."
    end

    local target_player = minetest.get_player_by_name(target_player_name)
    if not target_player then
        return false, "Target player not found."
    end

    -- Set up the detached inventory and sync the player's current inventory to it
    inventory_admin.setup_detached_inventory(target_player_name)
    inventory_admin.sync_player_to_detached_inventory(target_player_name)  -- Sync the player inventory to the detached inventory

    -- Show the formspec to the player who issued the command
    minetest.show_formspec(name, "inventory_admin:player_inventory", 
        inventory_admin.get_player_inventory_formspec(name, target_player_name))

    return true, "Showing inventory of " .. target_player_name
end



The following are the instructions for the project:

// /home/impulse/Projects/Lua/minetest_mods/inventory_admin/README.md
# Inventory Admin


